1. In project settings.py

Under APPS install the following: 
"django.contrib.auth", 
"django.contrib.contenttypes", 

Rember to migrate if you added them install

2. Store passwords safely 
never store passwords as plain text

we will use PBKDF2 algorithm , uses SHA256 hash algorithm (built into django)

Install in virtual env:

pip install bcrypt
pip install django[argon2]
pip install pillow # for media images

3. inside settings.py in project directory

pass in list of PASSWORD_HASHERS

4. Genenate password hash 

https://passwordsgenerator.net/sha256-hash-generator/


5. steps

django-admin startproject learning_users
cd leaning_users
django-admin startapp basic_app

6. settings.py


INSTALLED_APPS = [
    'django.contrib.admin',   # make sure added 
    'django.contrib.auth',   # for password encrytion
    'django.contrib.contenttypes',  # for password encrytion
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'basic_app'    # ADD the app
]

Pass in list of passwords :

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
]

Now add password validators:

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS':{'min_length':9}
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

Add template directory
import os
'DIRS': [os.path.join(BASE_DIR, 'templates')],   # ADD THIS ONE

mkdir templates/basic_app  in project

Add static 
mkdir static  in project

STATIC_DIR = os.path.join(BASE_DIR,"static")  # add this line to project settings
STATIC_URL = '/static/'
STATICFILES_DIRS = [   # ADD THIS BIT
    STATIC_DIR,
]

Add media 
mkdir media in project   # this is for user data (eg pics uploaded by user)

7. Migrations
python manage.py migrate.py
python manage.py makemigrations basic_app

Do step 2 : install packages_checked

8. Update Models.py to import from user from django.contrib.auth.model_labels

from django.db import models
from django.contrib.auth.models import User

# Create your models here.
class UserProfileInfo(models.Model):

    # Create relationship (don't inherit from User!)
    user = models.OneToOneField(User,on_delete=models.CASCADE)

    # Add any additional attributes you want
    portfolio_site = models.URLField(blank=True)
    # pip install pillow to use this!
    # Optional: pip install pillow --global-option=”build_ext” --global-option=”--disable-jpeg”
    profile_pic = models.ImageField(upload_to='profile_pics',blank=True)

    def __str__(self):
        # Built-in attribute of django.contrib.auth.models.User !
        return self.user.username

9. Register model in admin.py

from django.contrib import admin
from basic_app.models import UserProfileInfo, User

# Register your models here.
admin.site.register(UserProfileInfo)

10. Run migrations
 python manage.py migrate
 python manage.py makemigrations basic_app
 python manage.py migrate

11. Create super username
python manage.py createsuperuser

12. update forms.py in basic_app

from django import forms
from django.contrib.auth.models import User
from basic_app.models import UserProfileInfo

class UserForm(forms.ModelForm):
    password = forms.CharField(widget=forms.PasswordInput())

    class Meta():
        model = User
        fields = ('username','email','password')


class UserProfileInfoForm(forms.ModelForm):
    class Meta():
        model = UserProfileInfo
        fields = ('portfolio_site','profile_pic')

13. create media container

create new folder in media/profile_pics

14. Work on html templates

touch templates/basic_app/base.html
touch templates/basic_app/index.html
touch templates/basic_app/login.html
touch templates/basic_app/registration.html


14. base.html

<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Base</title>
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

  </head>
  <body>
    <nav class="navbar navbar-default navbar-static-top">
      <div class="container">
        <ul class="nav navbar-nav">

          {# Django Home Link / Admin Link / Register Link#}
          <li><a class="navbar-brand" href="{% url 'index' %}">DJANGO</a></li>
          <li><a class="navbar-link" href="{% url 'admin:index' %}">Admin</a></li>
          <li><a class="navbar-link" href="{% url 'basic_app:register' %}">Register</a></li>

          {# Some logic on what to display for last item#}
          {% if user.is_authenticated %}
            <li><a href="{% url 'logout' %}">Logout</a></li>
          {% else %}
            <li><a class="navbar-link" href="{% url 'basic_app:user_login' %}">Login</a></li>
          {% endif %}
          
        </ul>
      </div>
    </nav>
    <div class="container">
    {% block body_block %}
    {% endblock %}
    </div>


  </body>
</html>

15. index.html

{% extends "basic_app/base.html" %}
{% block body_block %}

<div class="container">
  <div class="jumbotron">
    <h1>Django Level Five</h1>
    {% if user.is_authenticated %}
        <h2>Welcome {{ user.username }}!</h2>
    {% else %}
        <h2>Welcome to the site!</h2>
    {% endif %}
  </div>
</div>

{% endblock %}

16. registration.html

{% extends "basic_app/base.html" %}
{% load static %}

{% block body_block %}
  <div class="container">
    <div class="jumbotron">
      {% if registered %}
        <h1>Thank you for registering!</h1>
      {% else %}
        <h1>Register Here</h1>
        <h3>Just fill out the form.</h3>

        <form enctype="multipart/form-data" method="POST">
          {% csrf_token %}
          {{ user_form.as_p }}
          {{ profile_form.as_p }}
          <input type="submit" name="" value="Register">
        </form>

      {% endif %}

    </div>

  </div>

{% endblock %}

16. update urls.py in project

from django.contrib import admin
from django.urls import path
from basic_app import views
from django.conf.urls import include, re_path


urlpatterns = [
    path('admin/', admin.site.urls),
    re_path(r'^$', views.index, name='index'),
    path('basic_app/',include('basic_app.urls')),
]

17. create urls.py in basic_app

from django.contrib import admin
from django.urls import path
from basic_app import views
from django.conf.urls import url

# TEMPLDATE URLSearchParams
app_name = 'basic_app'

urlpatterns = [
    path('register/', views.register,name='register'),
]

18. views.py file setting up registration in basic_app

from django.shortcuts import render
from basic_app.forms import UserForm,UserProfileInfoForm

# Create your views here.

def index(request):
    return render(request,'basic_app/index.html')

def register(request):

    registered = False

    if request.method == 'POST':
        user_form = UserForm(data=request.POST)
        profile_form = UserProfileInfoForm(data=request.POST)

        if user_form.is_valid() and profile_form.is_valid():
            user = user_form.save() # grabbing user form, saving to database
            user.set_password(user.password)  # sets password as hash
            user.save() # saves to database again with hash password

            profile = profile_form.save(commit=False) # don't save to database yet, as we want to manipulate first
            profile.user = user # sets up 1 to 1 relationship

            if 'profile_pic' in request.FILES:
                profile.profile_pic = request.FILES['profile_pic']
            
            profile.save() # saves to database

            registered = True

        else:
            print(user_form.errors,profile.forms.errors)

    else:
        user_form = UserForm()
        profile_form = UserProfileInfoForm()
    

    return render(request,'basic_app/registration.html',
                            {'user_form':user_form,
                             'profile_form':profile_form,
                             'registered':registered})


19. login edit setting.py

LOGIN_URL = 'base_app/user_login'

20. setup login.html

{% extends 'basic_app/base.html' %}
{% block body_block %}
  <div class="container">
    <div class="jumbotron">
      <h1>Please Login</h1>

        <form method="post" action="{% url 'basic_app:user_login' %}">
          {% csrf_token %}
          {# A more "HTML" way of creating the login form#}
          <label for="username">Username:</label>
          <input type="text" name="username" placeholder="Username">

          <label for="password"></label>
          <input type="password" name="password">

          <input type="submit" name="" value="Login">

        </form>

    </div>
  </div>
{% endblock %}


21. update view.py in basic_app
from django.shortcuts import render
from basic_app.forms import UserForm,UserProfileInfoForm


# Login additions

from django.http import HttpResponseRedirect,HttpResponse
from django.urls import reverse
from django.contrib.auth.decorators import login_required
from django.contrib.auth import authenticate, login, logout

# Create your views here.

def index(request):
    return render(request,'basic_app/index.html')

def register(request):

    registered = False

    if request.method == 'POST':
        user_form = UserForm(data=request.POST)
        profile_form = UserProfileInfoForm(data=request.POST)

        if user_form.is_valid() and profile_form.is_valid():
            user = user_form.save() # grabbing user form, saving to database
            user.set_password(user.password)  # sets password as hash
            user.save() # saves to database again with hash password

            profile = profile_form.save(commit=False) # don't save to database yet, as we want to manipulate first
            profile.user = user # sets up 1 to 1 relationship

            if 'profile_pic' in request.FILES:
                profile.profile_pic = request.FILES['profile_pic']
            
            profile.save() # saves to database

            registered = True

        else:
            print(user_form.errors,profile.forms.errors)

    else:
        user_form = UserForm()
        profile_form = UserProfileInfoForm()
    

    return render(request,'basic_app/registration.html',
                            {'user_form':user_form,
                             'profile_form':profile_form,
                             'registered':registered})

# Login views

def user_login(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')

        user = authenticate(username=username,password=password)

        if user:
            if user.is_active:
                login(request, user)
                return HttpResponseRedirect(reverse('index'))
            else:
                return HttpResponse("account not active")

        else:
            print ("failed login attempt ",username,password)
            return HttpResponse("Invalid login details supplied")
    else:
        return render(request,'basic_app/login.html',{})

@login_required
def user_logout(request):

    logout(request)
    return HttpResponseRedirect(reverse('index'))

@login_required
def special(request):
    return HttpResponse("you are logined in nice!")




22. update urls.py in project

from django.contrib import admin
from django.urls import path
from basic_app import views
from django.conf.urls import include, re_path


urlpatterns = [
    path('admin/', admin.site.urls),
    re_path(r'^$', views.index, name='index'),
    path('basic_app/',include('basic_app.urls')),
    path('logout/',views.user_logout,name="logout")
    path('special/',views.special,name="special")
]

23. update urls.py in basic_app

from django.contrib import admin
from django.urls import path
from basic_app import views
from django.conf.urls import url

# TEMPLDATE URLSearchParams
app_name = 'basic_app'

urlpatterns = [
    path('register/', views.register,name='register'),
    path('login/', views.user_login,name='user_login')
]


24. edit base.html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Base</title>
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

  </head>
  <body>
    <nav class="navbar navbar-default navbar-static-top">
      <div class="container">
        <ul class="nav navbar-nav">

          {# Django Home Link / Admin Link / Register Link#}
          <li><a class="navbar-brand" href="{% url 'index' %}">DJANGO</a></li>
          <li><a class="navbar-link" href="{% url 'admin:index' %}">Admin</a></li>
          <li><a class="navbar-link" href="{% url 'basic_app:register' %}">Register</a></li>

          {# Some logic on what to display for last item#}
          {% if user.is_authenticated %}
            <li><a href="{% url 'logout' %}">Logout</a></li>
          {% else %}
            <li><a class="navbar-link" href="{% url 'basic_app:user_login' %}">Login</a></li>
          {% endif %}
          
        </ul>
      </div>
    </nav>
    <div class="container">
    {% block body_block %}
    {% endblock %}
    </div>


  </body>
</html>












